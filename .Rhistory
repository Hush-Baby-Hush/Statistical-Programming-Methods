arr = rev(split_digits(remain))
multiplier2 = arr[seq_along(arr)%%2==1]*2
multiplier1 = arr[seq_along(arr)%%2==0]
idx = which(multiplier2>9)
origin = multiplier2[which(multiplier2<10)]
s = 0
for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
is_valid(num = 4539319503436467) # should return TRUE
is_valid(num = 8273123273520569) # should return FALSE
#exercise 5
nfl_2021 = as.data.frame(load_schedules(seasons = 2021))
library(dplyr)
df = filter(nfl_2021, home_team =="CHI" | away_team =="CHI")
select(df, week, away_team , home_team)
#exercise 4
library(nflreadr)
library(tidyverse)
rosters_2021 = as.data.frame(load_rosters(seasons = 2021))
rosters_2021 = rosters_2021[complete.cases(rosters_2021[, "college"]), ]
nfl_illini_2021 = select(rosters_2021[which(rosters_2021$college=="Illinois"),],team,position,jersey_number,full_name,height,weight)
nfl_illini_2021$height[which(nfl_illini_2021$full_name == "Nate Hobbs")]="6-0"
nfl_illini_2021
#exercise 5
nfl_2021 = as.data.frame(load_schedules(seasons = 2021))
library(dplyr)
df = filter(nfl_2021, home_team =="CHI" | away_team =="CHI")
select(df, week, away_team , home_team)
5>1:10
xor(1,1)
1:10 %in% 10:1
df["a"]
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
df["a"]
typeof(df["a"] )
length(df["a"] )
typeof(df$b)
length(df$b)
df[, 2]
typeof(df[, 2])
typeof(df$c)
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
length(df$c)
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
length(df)
typeof(df["a"])
typeof(df)
typeof(2)
typeof(c(2))
i = 42
j = 55
k = 11
if (i == 42) {
j = -i
} else {
i = 66
}
if (i != j) {
i = j
} else {
i = i + j
j = 0
}
if (i > 42) {
k = 42
j = 0
} else if (j < 42) {
j = i + k
k = -i
} else {
i = "hello world"
}
i
j
k
x = 0
i = 0
while(x >= 0) {
x = x + 2
if (x > 100) {
x = -x
}
i = i + 1
}
i
x
is_prime = function(x) {
# check vector length and mode
if (!(is.numeric(x) & length(x) == 1)) {
stop("x must be a numeric vector of length 1")
}
# trick to allow integers input as doubles to be accepted
if (as.integer(x) != x) {
stop("values that cannot be represented as an integer are not allowed")
}
# only consider non-negative numbers
if (x < 0) {
stop("x must be non-negative")
}
# delete this comment and place your code here
if(x==1){return(FALSE)}
if(x==2){return(TRUE)}
for (i in 2:(x-1)) {
if(x%%i==0){return(FALSE)}
}
return(TRUE)
}
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(is_prime(x))
return(x[idx])
}
find_primes(x = 1:10)
is_prime = function(x) {
# check vector length and mode
if (!(is.numeric(x) & length(x) == 1)) {
stop("x must be a numeric vector of length 1")
}
# trick to allow integers input as doubles to be accepted
if (as.integer(x) != x) {
stop("values that cannot be represented as an integer are not allowed")
}
# only consider non-negative numbers
if (x < 0) {
stop("x must be non-negative")
}
# delete this comment and place your code here
if(x==1){return(FALSE)}
if(x==2){return(TRUE)}
for (i in 2:(x-1)) {
if(x%%i==0){return(FALSE)}
}
return(TRUE)
}
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(for(i in x){is_prime(i)})
return(x[idx])
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(for(i in x){is_prime(i)==TRUE})
return(x[idx])
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
return(arr)
}
}
find_primes(x = 1:10)
is_prime(x = 17)
is_prime(x = 16)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
print(i)
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
print(arr)
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
arr = append(arr,i)
}
}
return(arr)
}
find_primes(x = 1:10)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (i in coefs) {
ans = ans + x^i
}
return(ans)
}
eval_polynomial(coefs = some_coefs, x = 2)
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (m in coefs) {
ans = ans + x^m
i=i+1
}
return(ans)
}
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (m in coefs) {
ans = ans + m*x^i
i=i+1
}
return(ans)
}
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(operation(x[1:i]))
}
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(arr,operation(x[1:i]))
}
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative(x = 1:10, operation = sum)
calc_cumulative(x = c(10, 11, 10, 5, 12), operation = max)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(arr,operation(x[1:i]))
}
return(arr)
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative(x = 1:10, operation = sum)
calc_cumulative(x = c(10, 11, 10, 5, 12), operation = max)
a = 1:10
a
a[-8]
a = 2:11
a
a[-1]
selection_sort = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = vector(0,length(x));
for (i in 1:length(x)) {
idx = which.min(x)
arr[i] = x[idx]
x = x[-idx]
}
return(arr)
}
selection_sort(x = c(2, 2, 1, 1, 4, 6, 8, 2, 10))
selection_sort = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = vector(,length(x));
for (i in 1:length(x)) {
idx = which.min(x)
arr[i] = x[idx]
x = x[-idx]
}
return(arr)
}
selection_sort(x = c(2, 2, 1, 1, 4, 6, 8, 2, 10))
selection_sort(x = 10:1)
calculate_pi = function(xs, ys) {
# delete this comment and place your code here
count = 0
for (i in 1:length(xs)) {
if(xs[i]^2+ys[i]^2<=1){
count = count+1
}
}
return(4*count/length(xs))
}
set.seed(42)
x = runif(n = 1000)
y = runif(n = 1000)
calculate_pi(xs = x, ys = y)
calc_volume_sphere = function(radius=4){
vol = 4/3*pi*radius^3
}
calc_volume_sphere(1)
calc_volume_sphere = function(radius=4){
vol = 4/3*pi*radius^3
return(vol)
}
calc_volume_sphere(1)
set.seed(42)
vec = round(10 * runif(n = 100), 2)
positive = vec[c(2,17,21)]
negative = vec[-c(6,13,30)]
vec
positive
negative
?is.character
is.character("abc")
is.character("a")
is.character("1")
is.character(12)
is.character(2:3)
is.character(c("a","b"))
rep_and_concat_string = function(string, times) {
# delete this comment and place your code here
if(!is.character(string) || length(string)!=1){
stop("string must be a character vector of length 1")
}
if(!is.numeric(times) || length(times)!=1){
stop("times must be a numeric vector of length 1")
}
if(length(string)*times>100){
warning("this will produce a very long string")
}
strrep(string, times)
}
rep_and_concat_string("abc", times = "B A D")
rep_and_concat_string("abc", times = 5)
rep_and_concat_string("abc", times = 500)
rep_and_concat_string("abc", times = 50)
nchar("abc")
some_df = data.frame(
f = rep(415,31),
h = rep("STAT 385", 31),
r = 1:31
)
some_df
a = 1:10
a
a[2]
gen_seq = function(first,len){
if(len==1){
return(first)
}
arr = vector(,length = len)
arr[1] = first
for(i in 2:len){
val = 4*arr[i-1]+15
arr[i]=log(val)
}
return(arr)
}
gen_seq(4,1)
gen_seq(4,10)
some_vector = c(7,172,1001,1039,1042)
some_vector
is.numeric(some_vector)
set.seed(42)
long_vec = round(100 * runif(n = 200), 2)
even = long_vec[seq_along(long_vec)%%2==0]
large = long_vec[long_vec>75]
long_vec
even
large
check_vec_total = function(x){
if(sum(x)<=13){
return("small total")
}
if(sum(x)>13 & sum(x)<=28){
return("medium total")
}
if(sum(x)>28){
return("large total")
}
}
check_vec_total(1:20)
check_vec_total(1:2)
check_vec_total(1:10)
check_vec_total(1:5)
some_list = list(
v = 42,
a = "Exams are fun!",
r = 6:255
)
some_list
library(dplyr)
starwars = dplyr::starwars
library(dplyr)
starwars = dplyr::starwars
starwars
library(dplyr)
starwars = dplyr::starwars
# delete this comment and place your code here
sw_df = sw_df %>%
group_by(homeworld) %>%
summarize(n = count())
# delete this comment and place your code here
sw_df = starwars %>%
group_by(homeworld) %>%
summarize(n = count())
sw_df
# delete this comment and place your code here
sw_df = starwars %>%
group_by(homeworld) %>%
mutate(n = count())
# delete this comment and place your code here
sw_df = starwars %>%
group_by(homeworld) %>%
summarize(n = count(homeworld))
# delete this comment and place your code here
sw_df = starwars %>%
count(homeworld)
sw_df
# delete this comment and place your code here
sw_df = starwars %>%
count(homeworld, sort= TRUE)
sw_df
