for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
print(result)
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
is_valid = function(num) {
if (length(split_digits(x = num)) < 2) {
stop("input numbermust have at least two digits")
}
# delete this comment and place your code here
check_digit = num%%10
remain = (num-check_digit)/10
arr = split_digits(remain)
multiplier2 = arr[seq_along(arr)%%2==1]*2
multiplier1 = arr[seq_along(arr)%%2==0]
idx = which(multiplier2>9)
origin = multiplier2[which(multiplier2<10)]
s = 0
for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
print(result)
print(multiplier2)
print(multiplier1)
print(idx)
print(origin)
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
split_digits = function(x) {
if (!is.numeric(x) | length(x) != 1 | trunc(x) != x) {
stop("x stop be a numeric vector (that represents an \"integer\") of length 1")
}
return(as.numeric(strsplit(as.character(x), split = "")[[1]]))
}
is_valid = function(num) {
if (length(split_digits(x = num)) < 2) {
stop("input numbermust have at least two digits")
}
# delete this comment and place your code here
check_digit = num%%10
remain = (num-check_digit)/10
arr = split_digits(remain)
multiplier2 = arr[seq_along(arr)%%2==0]*2
multiplier1 = arr[seq_along(arr)%%2==1]
idx = which(multiplier2>9)
origin = multiplier2[which(multiplier2<10)]
s = 0
for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
print(result)
print(multiplier2)
print(multiplier1)
print(idx)
print(origin)
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
is_valid(num = 4539319503436467) # should return TRUE
is_valid(num = 8273123273520569) # should return FALSE
a = 1:10
a
reverse(a)
a[:,-1]
rev(a)
is_valid = function(num) {
if (length(split_digits(x = num)) < 2) {
stop("input numbermust have at least two digits")
}
# delete this comment and place your code here
check_digit = num%%10
remain = (num-check_digit)/10
arr = rev(split_digits(remain))
multiplier2 = arr[seq_along(arr)%%2==1]*2
multiplier1 = arr[seq_along(arr)%%2==0]
idx = which(multiplier2>9)
origin = multiplier2[which(multiplier2<10)]
s = 0
for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
print(result)
print(multiplier2)
print(multiplier1)
print(idx)
print(origin)
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
is_valid(num = 4539319503436467) # should return TRUE
is_valid(num = 8273123273520569) # should return FALSE
split_digits = function(x) {
if (!is.numeric(x) | length(x) != 1 | trunc(x) != x) {
stop("x stop be a numeric vector (that represents an \"integer\") of length 1")
}
return(as.numeric(strsplit(as.character(x), split = "")[[1]]))
}
is_valid = function(num) {
if (length(split_digits(x = num)) < 2) {
stop("input numbermust have at least two digits")
}
# delete this comment and place your code here
check_digit = num%%10
remain = (num-check_digit)/10
arr = rev(split_digits(remain))
multiplier2 = arr[seq_along(arr)%%2==1]*2
multiplier1 = arr[seq_along(arr)%%2==0]
idx = which(multiplier2>9)
origin = multiplier2[which(multiplier2<10)]
s = 0
for (i in idx) {
s = s + sum(split_digits(multiplier2[i]))
}
s = s + sum(multiplier1) + sum(origin)
result = 10-s%%10
if(result==check_digit){
return(TRUE)
}
return(FALSE)
}
is_valid(num = 79927398713)      # should return TRUE
is_valid(num = 4539319503436467) # should return TRUE
is_valid(num = 8273123273520569) # should return FALSE
#exercise 5
nfl_2021 = as.data.frame(load_schedules(seasons = 2021))
library(dplyr)
df = filter(nfl_2021, home_team =="CHI" | away_team =="CHI")
select(df, week, away_team , home_team)
#exercise 4
library(nflreadr)
library(tidyverse)
rosters_2021 = as.data.frame(load_rosters(seasons = 2021))
rosters_2021 = rosters_2021[complete.cases(rosters_2021[, "college"]), ]
nfl_illini_2021 = select(rosters_2021[which(rosters_2021$college=="Illinois"),],team,position,jersey_number,full_name,height,weight)
nfl_illini_2021$height[which(nfl_illini_2021$full_name == "Nate Hobbs")]="6-0"
nfl_illini_2021
#exercise 5
nfl_2021 = as.data.frame(load_schedules(seasons = 2021))
library(dplyr)
df = filter(nfl_2021, home_team =="CHI" | away_team =="CHI")
select(df, week, away_team , home_team)
5>1:10
xor(1,1)
1:10 %in% 10:1
df["a"]
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
df["a"]
typeof(df["a"] )
length(df["a"] )
typeof(df$b)
length(df$b)
df[, 2]
typeof(df[, 2])
typeof(df$c)
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
length(df$c)
df = data.frame(a = 1:10,
b = "Hello!",
c = 2:3)
length(df)
typeof(df["a"])
typeof(df)
typeof(2)
typeof(c(2))
i = 42
j = 55
k = 11
if (i == 42) {
j = -i
} else {
i = 66
}
if (i != j) {
i = j
} else {
i = i + j
j = 0
}
if (i > 42) {
k = 42
j = 0
} else if (j < 42) {
j = i + k
k = -i
} else {
i = "hello world"
}
i
j
k
x = 0
i = 0
while(x >= 0) {
x = x + 2
if (x > 100) {
x = -x
}
i = i + 1
}
i
x
is_prime = function(x) {
# check vector length and mode
if (!(is.numeric(x) & length(x) == 1)) {
stop("x must be a numeric vector of length 1")
}
# trick to allow integers input as doubles to be accepted
if (as.integer(x) != x) {
stop("values that cannot be represented as an integer are not allowed")
}
# only consider non-negative numbers
if (x < 0) {
stop("x must be non-negative")
}
# delete this comment and place your code here
if(x==1){return(FALSE)}
if(x==2){return(TRUE)}
for (i in 2:(x-1)) {
if(x%%i==0){return(FALSE)}
}
return(TRUE)
}
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(is_prime(x))
return(x[idx])
}
find_primes(x = 1:10)
is_prime = function(x) {
# check vector length and mode
if (!(is.numeric(x) & length(x) == 1)) {
stop("x must be a numeric vector of length 1")
}
# trick to allow integers input as doubles to be accepted
if (as.integer(x) != x) {
stop("values that cannot be represented as an integer are not allowed")
}
# only consider non-negative numbers
if (x < 0) {
stop("x must be non-negative")
}
# delete this comment and place your code here
if(x==1){return(FALSE)}
if(x==2){return(TRUE)}
for (i in 2:(x-1)) {
if(x%%i==0){return(FALSE)}
}
return(TRUE)
}
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(for(i in x){is_prime(i)})
return(x[idx])
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
idx = which(for(i in x){is_prime(i)==TRUE})
return(x[idx])
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
return(arr)
}
}
find_primes(x = 1:10)
is_prime(x = 17)
is_prime(x = 16)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
print(i)
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
append(arr,i)
}
print(arr)
}
return(arr)
}
find_primes(x = 1:10)
find_primes = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = c()
for(i in x){
if(is_prime(i)){
arr = append(arr,i)
}
}
return(arr)
}
find_primes(x = 1:10)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (i in coefs) {
ans = ans + x^i
}
return(ans)
}
eval_polynomial(coefs = some_coefs, x = 2)
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (m in coefs) {
ans = ans + x^m
i=i+1
}
return(ans)
}
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
eval_polynomial = function(coefs, x){
i = 0
ans = 0
for (m in coefs) {
ans = ans + m*x^i
i=i+1
}
return(ans)
}
some_coefs = c(3, 4, 5, 6)
eval_polynomial(coefs = some_coefs, x = 2)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(operation(x[1:i]))
}
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(arr,operation(x[1:i]))
}
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative(x = 1:10, operation = sum)
calc_cumulative(x = c(10, 11, 10, 5, 12), operation = max)
calc_cumulative = function(x, operation = sum) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
if (!is.function(operation)) {
stop("operation must be a function")
} else if (!is.numeric(operation(x))) {
stop("operation must return a numeric vector")
} else if (length(operation(x)) != 1) {
stop("operation must return a numeric vector of length 1")
}
# delete this comment and place your code here
arr = c()
for (i in 1:length(x)) {
arr = append(arr,operation(x[1:i]))
}
return(arr)
}
calc_cumulative(x = c(2, 4, 6), operation = prod)
calc_cumulative(x = 1:10, operation = sum)
calc_cumulative(x = c(10, 11, 10, 5, 12), operation = max)
a = 1:10
a
a[-8]
a = 2:11
a
a[-1]
selection_sort = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = vector(0,length(x));
for (i in 1:length(x)) {
idx = which.min(x)
arr[i] = x[idx]
x = x[-idx]
}
return(arr)
}
selection_sort(x = c(2, 2, 1, 1, 4, 6, 8, 2, 10))
selection_sort = function(x) {
if (!is.numeric(x)) {
stop("x must be a numeric vector")
}
# delete this comment and place your code here
arr = vector(,length(x));
for (i in 1:length(x)) {
idx = which.min(x)
arr[i] = x[idx]
x = x[-idx]
}
return(arr)
}
selection_sort(x = c(2, 2, 1, 1, 4, 6, 8, 2, 10))
selection_sort(x = 10:1)
calculate_pi = function(xs, ys) {
# delete this comment and place your code here
count = 0
for (i in 1:length(xs)) {
if(xs[i]^2+ys[i]^2<=1){
count = count+1
}
}
return(4*count/length(xs))
}
set.seed(42)
x = runif(n = 1000)
y = runif(n = 1000)
calculate_pi(xs = x, ys = y)
